from collections import defaultdict

# Define courses with faculty and room info
courses = {
    "C1": {"faculty": "F1", "room": "R1"},
    "C2": {"faculty": "F2", "room": "R2"},
    "C3": {"faculty": "F1", "room": "R3"},
    "C4": {"faculty": "F3", "room": "R2"},
    "C5": {"faculty": "F4", "room": "R1"},
}

# Domain: 3 available slots per day
slots = ["Slot1", "Slot2", "Slot3"]

domains = {course: slots[:] for course in courses}

# Check constraints
def is_consistent(assignment, course, slot):
    faculty = courses[course]["faculty"]
    room = courses[course]["room"]
    for c, s in assignment.items():
        if s == slot:
            if courses[c]["faculty"] == faculty:
                return False  # faculty conflict
            if courses[c]["room"] == room:
                return False  # room conflict
    return True

# Minimum Remaining Values (MRV) heuristic
def select_unassigned_variable(assignment, domains):
    unassigned = [v for v in domains if v not in assignment]
    # choose variable with fewest legal values
    return min(unassigned, key=lambda var: len(domains[var]))

# Backtracking search
def backtrack(assignment, domains):
    if len(assignment) == len(courses):
        return assignment
    
    var = select_unassigned_variable(assignment, domains)
    for value in domains[var]:
        if is_consistent(assignment, var, value):
            assignment[var] = value
            # forward check: reduce domain
            new_domains = {v: d[:] for v, d in domains.items()}
            new_domains[var] = [value]
            result = backtrack(assignment, new_domains)
            if result:
                return result
            del assignment[var]
    return None

# Solve
solution = backtrack({}, domains)

# Print timetable
if solution:
    print("Final Timetable:")
    print("Course | Faculty | Room | Slot")
    print("-"*35)
    for course, slot in solution.items():
        f = courses[course]["faculty"]
        r = courses[course]["room"]
        print(f"{course:6} | {f:7} | {r:4} | {slot}")
else:
    print("No valid timetable found!")
